---
// src/pages/blog/[...slug].astro
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import { readFileSync } from 'node:fs';
import path from 'node:path';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const paths = [];

  console.log('[getStaticPaths] All posts (from getCollection):', posts); // LOG 1: Semua postingan

  for (const post of posts) {
    console.log('[getStaticPaths] Processing post:', post); // LOG 2: Postingan saat ini

    if (!post.id || typeof post.id !== 'string' || !post.id.trim()) {
      console.warn(`[getStaticPaths] Skipping invalid post (empty or invalid id):`, post);
      continue;
    }

    if (post.id.includes('/')) {
      console.warn(`[getStaticPaths] Skipping sub-section in main loop:`, post); // Seharusnya tidak ada
      continue;
    }


    paths.push({
      params: { slug: post.id },
      props: { post, subSection: null },
    });


    const contentDir = path.resolve(import.meta.dir, '../../content/blog');
    const subSectionDir = path.join(contentDir, post.id);


    try { // Tambahkan try...catch di SEKITAR pembacaan direktori
      const files = readdirSync(subSectionDir);
      console.log(`[getStaticPaths] Files in sub-section directory (${subSectionDir}):`, files); // LOG 3

      for (const file of files) {
        if (!file.endsWith('.md')) {
          console.warn(`[getStaticPaths] Skipping non-Markdown file: ${post.id}/${file}`);
          continue;
        }
        const subSlug = file.replace(/\.md$/, '');
        if (!subSlug || typeof subSlug !== 'string' || !subSlug.trim()) {
          console.warn(`[getStaticPaths] Skipping invalid sub-section file (empty or invalid slug): ${post.id}/${file}`);
          continue;
        }

        console.log(`[getStaticPaths] Adding path for sub-section: ${post.id}/${subSlug}`); // LOG 4
        paths.push({
          params: { slug: `${post.id}/${subSlug}` },
          props: { post, subSection: subSlug },
        });
      }
    } catch (err) {
      // HANYA log jika BUKAN error karena direktori tidak ada
      if (err.code !== 'ENOENT') {
        console.error(`[getStaticPaths] Error reading sub-section directory for ${post.id}:`, err);
      }
    }
  }

  console.log('[getStaticPaths] Generated paths:', paths); // LOG 5: Semua path yang dihasilkan
  return paths;
}


type Props = {
  post: CollectionEntry<'blog'>;
  subSection: string | null;
};

const { post, subSection } = Astro.props;

let finalContent;
let finalTitle;
let finalDescription;
let finalPubDate;
let finalUpdatedDate;
let finalHeroImage;

if (subSection) {
    // --- Logika untuk Sub-bagian ---
    const filePath = path.resolve(import.meta.dir, `../../content/blog/${post.id}/${subSection}.md`);
    const fileContent = readFileSync(filePath, 'utf-8');
    const frontmatterMatch = fileContent.match(/^---\n([\s\S]*?)\n---/);

    let frontmatter: any = {};
    if (frontmatterMatch) {
        const frontmatterStr = frontmatterMatch[1];
        frontmatterStr.split('\n').forEach((line) => {
            const [key, ...valueParts] = line.split(':').map((s) => s.trim());
            if (key) {
                const value = valueParts.join(':').replace(/['"]+/g, '');
                frontmatter[key] = value;
            }
        });
    }
    finalTitle = frontmatter.title || subSection;
    finalDescription = frontmatter.description || post.data.description; // Ambil dari parent
    finalPubDate = frontmatter.pubDate || post.data.pubDate;
    finalUpdatedDate = frontmatter.updatedDate || post.data.updatedDate;
    finalHeroImage = frontmatter.heroImage || post.data.heroImage;
    const { Content } = await post.render();
    finalContent = Content;


} else {
    // --- Logika untuk Postingan Utama ---
    finalTitle = post.data.title;
    finalDescription = post.data.description;
    finalPubDate = post.data.pubDate;
    finalUpdatedDate = post.data.updatedDate;
    finalHeroImage = post.data.heroImage;
    const { Content } = await post.render();
    finalContent = Content;
}
---

<BlogPost
  title={finalTitle}
  description={finalDescription}
  pubDate={finalPubDate}
  updatedDate={finalUpdatedDate}
  heroImage={finalHeroImage}
>
    {/* Navigasi Sub-bagian (HANYA di postingan utama) */}
    {!subSection && (
        <nav>
        <ul>
            {
            ( () => {
                const contentDir = path.resolve(import.meta.dir, '../../content/blog');
                const subSectionDir = path.join(contentDir, post.id);
                let subSections = [];
                try{
                    const files = readdirSync(subSectionDir);
                    subSections = files.filter(file => file.endsWith('.md'))
                    .map(file => {
                        const filePath = path.join(subSectionDir, file);
                        const content = readFileSync(filePath, 'utf-8');
                        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);

                        let title = path.basename(file, '.md'); // Default title
                        if(frontmatterMatch){
                            const frontmatter = frontmatterMatch[1];
                            const titleMatch = frontmatter.match(/title:\s*(.+)/);
                            if(titleMatch) {
                                title = titleMatch[1].trim().replace(/['"]+/g, '');
                            }
                        }
                        return {
                        slug: file.replace(/\.md$/, ''),
                        title: title
                        }
                    });
                    return subSections.map((sub) => (
                        <>
                         <li>
                          <a href={`/blog/${post.id}/${sub.slug}`}>{sub.title}</a>
                        </li>
                        </>
                      ))
                } catch(error){
                    return null;
                }

            })()

            }

        </ul>
        </nav>
    )}
    {/* --- Konten --- */}
    <finalContent />
</BlogPost>
