--- a/src/pages/blog/[...slug].astro
+++ b/src/pages/blog/[...slug].astro
@@ -10,10 +10,20 @@
   const paths = [];
 
   for (const post of posts) {
+    // 1. Validasi post.id: Harus string, tidak kosong, dan tidak hanya spasi.
+    if (!post.id || typeof post.id !== 'string' || !post.id.trim()) {
+      console.warn(`[getStaticPaths] Skipping invalid post (empty or invalid id):`, post); // Log peringatan
+      continue; // Lewati postingan ini
+    }
+
+    // 2. Pastikan post.id TIDAK mengandung garis miring (/). Ini HANYA untuk postingan utama.
+    if (post.id.includes('/')) {
+      continue; // Lewati sub-bagian di sini; akan ditangani di loop dalam
+    }
+
     // Path untuk postingan utama
     paths.push({
       params: { slug: post.id },
-      props: { post, subSection: null }, // Tandai sebagai postingan utama
     });
 
     // Cek sub-bagian
@@ -23,19 +33,23 @@
     try {
       const files = readdirSync(subSectionDir);
       const subSections = files.filter((file) => file.endsWith('.md'));
-
       for (const subSection of subSections) {
-        // Path untuk sub-bagian
-        paths.push({
-          params: { slug: `${post.id}/${subSection.replace(/\.md$/, '')}` },
-          props: { post, subSection: subSection.replace(/\.md$/, '') },
-        });
-      }
+          // 3. Validasi nama file sub-bagian: Harus .md dan slug-nya valid.
+          if (!file.endsWith('.md')) {
+            continue; // Lewati file non-Markdown
+          }
+          const subSlug = subSection.replace(/\.md$/, '');
+          if (!subSlug || typeof subSlug !== 'string' || !subSlug.trim()) {
+            console.warn(`[getStaticPaths] Skipping invalid sub-section file (empty or invalid slug): ${post.id}/${file}`);
+            continue; // Lewati file dengan slug tidak valid
+          }
+          paths.push({
+            params: { slug: `${post.id}/${subSlug}` },
+            props: { post, subSection: subSlug },
+          });
+        }
     } catch (err) {
-      // Direktori sub-bagian tidak ada (tidak apa-apa)
-    }
-  }
-
+      if (err.code !== 'ENOENT') {
         return paths;
 }
